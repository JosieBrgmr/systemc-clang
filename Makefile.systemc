
#######################################################
# Author: Hiren Patel
# Adapted
# Credit: https://stackoverflow.com/questions/5950395/makefile-to-compile-multiple-c-programs
#
########################################################
SYSTEMC 				?=
SYSTEMC_HOME    ?= $(SYSTEMC)
TARGET_ARCH     ?= linux64

LLVM_BUILD_DIR ?= 
SYSTEMC_CLANG_SRC ?= /home/twiga/code/systemc-clang
SYSTEMC_INC_DIR = $(SYSTEMC_HOME)/include 
SYSTEMC_LIB_DIR = $(SYSTEMC_HOME)/lib-$(TARGET_ARCH)

# LIBTOOL Setting
SHELL           = /bin/bash
LIBTOOL_DIR     = /usr/bin
LIBTOOL         = $(SHELL) $(LIBTOOL_DIR)/libtool

GXX             = g++
GCC             = gcc
LD              = g++

FLAGS           = -g -Wall -pedantic -Wno-long-long \
                 -DSC_INCLUDE_DYNAMIC_PROCESSES -fpermissive \
                 -I$(SYSTEMC_INC_DIR) -I$(SYSTEMC_CLANG_SRC)/src -I$(LLVM_BUILD_DIR)/include
LDFLAGS         = -L$(SYSTEMC_LIB_DIR) -lsystemc -lm

############################################################################
# 'A Generic Makefile for Building Multiple main() Targets in $PWD'
# Author:  Robert A. Nader (2012)
# Email: naderra at some g
# Web: xiberix
############################################################################
#  The purpose of this makefile is to compile to executable all C source
#  files in CWD, where each .c file has a main() function, and each object
#  links with a common LDFLAG.
#
#  This makefile should suffice for simple projects that require building
#  similar executable targets.  For example, if your CWD build requires
#  exclusively this pattern:
#
#  cc -c $(CFLAGS) main_01.c
#  cc main_01.o $(LDFLAGS) -o main_01
#
#  cc -c $(CFLAGS) main_2..c
#  cc main_02.o $(LDFLAGS) -o main_02
#
#  etc, ... a common case when compiling the programs of some chapter,
#  then you may be interested in using this makefile.
#
#  What YOU do:
#
#  Set PRG_SUFFIX_FLAG below to either 0 or 1 to enable or disable
#  the generation of a .exe suffix on executables
#
#  Set CFLAGS and LDFLAGS according to your needs.
#
#  What this makefile does automagically:
#
#  Sets SRC to a list of *.c files in PWD using wildcard.
#  Sets PRGS BINS and OBJS using pattern substitution.
#  Compiles each individual .c to .o object file.
#  Links each individual .o to its corresponding executable.
#
###########################################################################
#
PRG_SUFFIX_FLAG := 1
#
## ==================- NOTHING TO CHANGE BELOW THIS LINE ===================
##
TESTS = .
SRCS = $(wildcard $(TESTS)/*.cpp)
PRGS := $(patsubst %.cpp,%,$(SRCS))
PRG_SUFFIX=.x
BINS := $(patsubst %,%$(PRG_SUFFIX),$(PRGS))
## OBJS are automagically compiled by make.
OBJ := $(patsubst %.cpp,%.o,$(SRCS))
##
all : $(BINS)
##
## For clarity sake we make use of:
.SECONDEXPANSION:
#OBJ = $(patsubst %$(PRG_SUFFIX),%.o,$@)
ifeq ($(PRG_SUFFIX_FLAG),0)
        BIN = $(patsubst %$(PRG_SUFFIX),%,$@)
else
        BIN = $@
endif
## Compile the executables
#%$(PRG_SUFFIX) : $(OBJ)
%.x : %.o
	$(LIBTOOL) --mode=link --tag=CXX g++ -o $(BIN) $< $(FLAGS) $(LDFLAGS) 

%.o: %.cpp
	$(LIBTOOL) --mode=compile g++ -c $(FLAGS) $<

clean:
ifeq ($(PRG_SUFFIX_FLAG),0)
	$(RM) $(PRGS) *.lo 
else
	$(RM) $(BINS) *.lo 
endif

##
#rebuild: veryclean all

