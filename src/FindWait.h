#ifndef _FIND_WAIT_H_
#define _FIND_WAIT_H_

#include "clang/AST/RecursiveASTVisitor.h"
#include <map>

// Forward declarations
// Generated by iwyu
//
namespace clang { class CXXMethodDecl; }
namespace clang { class CallExpr; }
namespace clang { class UnresolvedMemberExpr; }
namespace llvm { class raw_ostream; }
namespace scpar { class WaitContainer; }

namespace scpar {

using namespace clang;
using namespace std;

class FindWait : public RecursiveASTVisitor<FindWait> {
 public:
  typedef std::vector<WaitContainer *> waitListType;

  typedef std::pair<CXXMethodDecl *, vector<string>> processWaitEventPairType;
  typedef std::map<CXXMethodDecl *, vector<string>> processWaitEventMapType;
  bool VisitUnresolvedMemberExpr(UnresolvedMemberExpr *e);
  FindWait(CXXMethodDecl *, llvm::raw_ostream &);
  virtual ~FindWait();
  bool shouldVisitTemplateInstantiations() const;

  virtual bool VisitCallExpr(CallExpr *expr);

  CXXMethodDecl *getEntryMethod() const;
  waitListType getWaitCalls();
  void dump();

 private:
  CXXMethodDecl *entry_method_decl_;
  llvm::raw_ostream &os_;
  CallExpr *wait_call_;
  bool found_wait_;
  waitListType wait_calls_list_;
};
}  // namespace scpar
#endif
