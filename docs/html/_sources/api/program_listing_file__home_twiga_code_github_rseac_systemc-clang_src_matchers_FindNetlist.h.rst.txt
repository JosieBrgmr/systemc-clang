
.. _program_listing_file__home_twiga_code_github_rseac_systemc-clang_src_matchers_FindNetlist.h:

Program Listing for File FindNetlist.h
======================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_twiga_code_github_rseac_systemc-clang_src_matchers_FindNetlist.h>` (``/home/twiga/code/github/rseac/systemc-clang/src/matchers/FindNetlist.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #ifndef _NETLIST_GEN_H_
   #define _NETLIST_GEN_H_
   
   #include "clang/AST/DeclCXX.h"
   #include "clang/AST/RecursiveASTVisitor.h"
   #include "llvm/Support/raw_ostream.h"
   #include <map>
   namespace scpar {
   
   using namespace clang;
   using namespace std;
   
   class FindNetlist : public RecursiveASTVisitor<FindNetlist> {
   public:
     // Removed Model::moduleMapType from constructor
     // Have to think of a way to include building
     // netlist from module constructors. Right now I am not
     // doing it.
     FindNetlist(FunctionDecl *);
     FindNetlist(const FindNetlist &);
     virtual ~FindNetlist();
   
   public:
     typedef pair<string, string> instanceModulePairType;
     typedef map<string, string> instanceModuleMapType;
   
     typedef pair<string, string> portSignalPairType;
     typedef map<string, string> portSignalMapType;
   
     typedef pair<string, portSignalMapType> instancePortSignalPairType;
     typedef map<string, portSignalMapType> instancePortSignalMapType;
   
     typedef pair<string, vector<string>> instanceListModulePairType;
     typedef map<string, vector<string>> instanceListModuleMapType;
   
   public: 
     virtual bool VisitCXXOperatorCallExpr(CXXOperatorCallExpr *ce);
   
     void updateInstanceListModuleMap(const std::string &, const std::string &);
   
     const instanceModuleMapType &getInstanceModuleMap();
     const instancePortSignalMapType &getInstancePortSignalMap();
     const instanceListModuleMapType &getInstanceListModuleMap();
     const portSignalMapType &getPortSignalMap();
     int getNumInstances(std::string);
     void dump();
   
   private:
     int _pass;
     instanceModuleMapType inst_module_map_;
     portSignalMapType port_signal_map_;
     instancePortSignalMapType inst_port_signal_map_;
     instanceListModuleMapType inst_list_module_map_;
   };
   } // namespace scpar
   #endif
