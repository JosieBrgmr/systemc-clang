
.. _program_listing_file__home_twiga_code_github_rseac_systemc-clang_src_matchers_FindEntryFunctions.h:

Program Listing for File FindEntryFunctions.h
=============================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_twiga_code_github_rseac_systemc-clang_src_matchers_FindEntryFunctions.h>` (``/home/twiga/code/github/rseac/systemc-clang/src/matchers/FindEntryFunctions.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #ifndef _FIND_ENTRY_FUNCTIONS_H_
   #define _FIND_ENTRY_FUNCTIONS_H_
   
   #include "EntryFunctionContainer.h"
   #include "clang/AST/RecursiveASTVisitor.h"
   #include <map>
   #include <string>
   #include <vector>
   
   namespace scpar {
   
   using namespace clang;
   
   class FindEntryFunctions : public RecursiveASTVisitor<FindEntryFunctions> {
   public:
     typedef std::vector<EntryFunctionContainer *> entryFunctionVectorType;
   
     typedef std::pair<string, vector<string>> entryFunctionLHSPairType;
     typedef std::map<string, vector<string>> entryFunctionLHSMapType;
   
     FindEntryFunctions(CXXRecordDecl *d, llvm::raw_ostream &os);
     virtual ~FindEntryFunctions();
   
     virtual bool VisitStringLiteral(StringLiteral *l);
     virtual bool VisitCXXMethodDecl(CXXMethodDecl *d);
     virtual bool VisitMemberExpr(MemberExpr *e);
     bool shouldVisitTemplateInstantiations() const;
   
     // Access Methods
     CXXRecordDecl *getEntryCXXRecordDecl();
     CXXMethodDecl *getEntryMethodDecl();
     string getEntryName();
     entryFunctionVectorType *getEntryFunctions();
     vector<CXXMethodDecl *> getOtherFunctions();
   
     void dump();
   
   private:
     llvm::raw_ostream &os_;
     CXXRecordDecl *_d;
     bool is_entry_function_;
     PROCESS_TYPE proc_type_;
     string entry_name_;
     CXXRecordDecl *entry_cxx_record_decl_;
     CXXMethodDecl *entry_method_decl_;
     bool found_entry_decl_;
     Stmt *constructor_stmt_;
     EntryFunctionContainer *ef;
     int pass_;
     entryFunctionVectorType entry_function_list_;
     entryFunctionLHSMapType entry_function_map_;
     vector<CXXMethodDecl *> other_function_list_;
   
     // Disallow constructor with no argument
     FindEntryFunctions(llvm::raw_ostream &os);
   };
   } // namespace scpar
   #endif
