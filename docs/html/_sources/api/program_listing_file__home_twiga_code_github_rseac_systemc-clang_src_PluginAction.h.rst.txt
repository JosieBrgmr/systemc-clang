
.. _program_listing_file__home_twiga_code_github_rseac_systemc-clang_src_PluginAction.h:

Program Listing for File PluginAction.h
=======================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_twiga_code_github_rseac_systemc-clang_src_PluginAction.h>` (``/home/twiga/code/github/rseac/systemc-clang/src/PluginAction.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   //===-- src/PluginAction.h - systec-clang class definition -------*- C++
   //-*-===//
   //
   //                     systemc-clang: SystemC Parser
   //
   // This file is distributed under the TBD
   // License. See LICENSE.TXT for details.
   //
   //===----------------------------------------------------------------------===//
   //===----------------------------------------------------------------------===//
   #ifndef _PLUGIN_ACTION_H_
   #define _PLUGIN_ACTION_H_
   
   #include <clang/Tooling/Tooling.h>
   #include "SystemCClang.h"
   namespace scpar {
   
   static llvm::cl::OptionCategory category("systemc-clang options");
   static llvm::cl::opt<std::string> topModule(
       "top-module",
       llvm::cl::desc("Specify top-level module declaration for entry point"),
       llvm::cl::cat(category));
   
   
   
   class SystemCClangAXN : public ASTFrontendAction {
    public:
     SystemCClangAXN() : top_{topModule} {};
   
    private:
     std::string top_;
   
    public:
     virtual std::unique_ptr<ASTConsumer> CreateASTConsumer(
         clang::CompilerInstance &Compiler, llvm::StringRef inFile) {
       return std::unique_ptr<ASTConsumer>(new SystemCConsumer(Compiler, top_));
     }
   };
   
   class PluginAction {
    public:
     PluginAction(int argc, const char **argv) {
       // Specify the top-level module.
       CommonOptionsParser OptionsParser(argc, argv, category);
       ClangTool Tool(OptionsParser.getCompilations(),
                      OptionsParser.getSourcePathList());
   
       std::unique_ptr<FrontendActionFactory> FrontendFactory;
       FrontendFactory = newFrontendActionFactory<SystemCClangAXN>();
       Tool.run(FrontendFactory.get());
     };
   };
   };  // namespace scpar
   
   #endif /* _PLUGIN_ACTION_H_ */
